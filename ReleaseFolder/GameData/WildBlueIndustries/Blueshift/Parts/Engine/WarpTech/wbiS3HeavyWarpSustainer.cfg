PART
{
	name = wbiS3HeavyWarpSustainer
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/WarpTech/s3HeavyWarpSustainer
	}

	rescaleFactor = 1

	node_stack_top = 0.0, 1.875, 0.0, 0.0, 1.0, 0.0, 3
	node_stack_bottom = 0.0, -1.875, 0.0, 0.0, -1.0, 0.0, 3
	node_stack_node1 = 0.0, 2.75, 7.3, 0.0, 1.0, 0.0, 1
	node_stack_node2 = 6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
	node_stack_node3 = -6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
	node_stack_node4 = 0.0, -1.0, 7.3, 0.0, -1.0, 0.0, 1
	node_stack_node5 = 6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1
	node_stack_node6 = -6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1

	TechRequired:NEEDS[CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!CommunityTechTree] = wbiWarpTech

	category = Engine
	subcategory = 0
	entryCost = 2500000
	cost = 500000

	title = S-3 Heavy Warp Sustainer
	manufacturer = <CLASSIFIED>
	description = The S-3 Heavy Warp Sustainer produces additional Warp Capacity that enables more massive vessels to travel faster than light and/or smaller vessels to go even faster. Instead of relying on parts salvaged from [REDACTED], it uses kerbal-tech to achieve its capabilities.
	attachRules = 1,0,1,1,0
	mass = 11.7
	dragModelType = none
	maximum_drag = 0.02
	minimum_drag = 0.02
	angularDrag = 0.2
	stackSymmetry = 2
	crashTolerance = 20
	thermalMassModifier = 8.0
	emissiveConstant = 0.95
	maxTemp = 2000
	explosionPotential = 0.1
	fuelCrossFeed = True
	breakingForce = 500000
	breakingTorque = 500000
	bulkheadProfiles = size3

	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}

	MODULE
	{
		name = WBIAnimatedTexture
//		debugMode = true

		// ID of the module so we can distinguish between several animated textures in one part.
		// This one is controlled by the warp coil.
		moduleID = WarpCoil

		textureTransformName = warpCoilPlasma
		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpPlasma
		minFramesPerSecond = 15
		maxFramesPerSecond = 50
		fadesAtMinThrottle = true
		emissiveFadeTime = 0.5
	}

	MODULE
	{
		name = WBIAnimatedTexture

		// ID of the module so we can distinguish between several animated textures in one part.
		// This one is controlled by the warp coil.
		moduleID = FusionTorus

		textureTransformName = fusionTorus
		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpPlasma
		minFramesPerSecond = 50
		maxFramesPerSecond = 50
		emissiveFadeTime = 0.5
	}

	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
//		debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Auxilary Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp engine.

		StartActionName = Activate Auxilary Power
		StopActionName = Deactivate Auxilary Power
		ToggleActionName = Toggle Auxilary Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		textureModuleID = FusionTorus

		// Generators can control effects too
//		startEffect = effectStart
//		stopEffect = effectStop
		runningEffect = running

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 4

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.02
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = FusionPellets
			Ratio = 0.000375
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 7500
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 30
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.02
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 50
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
//		debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
//		runningEffect =

		// Name of the waterfall effect controller
		waterfallEffectController = ringPlumeController

		// How much warp capacity can the coil produce?
		warpCapacity = 10

		// Warp coils determine how much mass can be displaced during warp travel.
		// Each coil is rated for the number of metric tonnes that it can move. The more coils you have, the more mass that you can move.
		// Alternately, you can add more generators to power the warp coils and "supercharge" them to displace more mass, 
		// but then they'll also wear out faster.
		// A vessel that is more massive than the total displacement will move slower than a vessel that is less massive than the total displacement.
		// Similarly, a coil that is underpowered will displace less mass than one that is overpowered.
		displacementImpulse = 100

		// In hours, the mean time between failures. Assumes that parts require maintenance.
		mtbf = 300

		// The minimum level of skill required to repair the part.
		// You can also change repairSkill, which defaults to "RepairSkill" (Engineers have this).
		// You can also change the repairKitName, which defaults to "evaRepairKit" (the stock EVA Repair Kit).
		minimumSkillLevel = 3

		// When parts require maintenance, how many repair kits are required to repair the part.
		repairKitsRequired = 4

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 200
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}

	MODULE
	{
		name = ModulePartVariants
		baseVariant = endcaps

		VARIANT
		{
			name = endcaps
			displayName = Endcaps
			primaryColor = #3a562a
			secondaryColor = #9e7100
			sizeGroup = GroupA
			GAMEOBJECTS
			{
				endcaps = true
			}
			NODES
			{
				node_stack_node1 = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1
				node_stack_node2 = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1
				node_stack_node3 = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1
				node_stack_node4 = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
				node_stack_node5 = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
				node_stack_node6 = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
			}
		}

		VARIANT
		{
			name = noEndcaps
			displayName = No Endcaps
			primaryColor = #3a562a
			secondaryColor = #9e7100
			sizeGroup = GroupA
			GAMEOBJECTS
			{
				endcaps = false
			}
			NODES
			{
				node_stack_node1 = 0.0, 2.75, 7.3, 0.0, 1.0, 0.0, 1
				node_stack_node2 = 6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
				node_stack_node3 = -6.321984, 2.75, -3.65, 0.0, 1.0, 0.0, 1
				node_stack_node4 = 0.0, -1.0, 7.3, 0.0, -1.0, 0.0, 1
				node_stack_node5 = 6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1
				node_stack_node6 = -6.321984, -1.0, -3.65, 0.0, -1.0, 0.0, 1
			}
		}
	}

MODULE:NEEDS[Waterfall]
{
	name = ModuleWaterfallFX
	engineID = 
	CONTROLLER
	{
		name = warpEffectController
		linkedTo = custom
	}
	EFFECT
	{
		name = ringPlume
		parentName = s3WarpEngine
		MODEL
		{
			path = Waterfall/FX/fx-cylinder
			positionOffset = 0,0,0
			rotationOffset = 90,0,0
			scaleOffset = 7.5,30,7.5
			MATERIAL
			{
				transform = Cylinder
				shader = Waterfall/Additive Directional
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-3
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.992156863,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 1,1,1,1
				}
				FLOAT
				{
					floatName = _Noise
					value = 2.25
				}
				FLOAT
				{
					floatName = _Brightness
					value = 2.5999999
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 5
				}
				FLOAT
				{
					floatName = _Falloff
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 1.54999995
				}
			}
		}
		FLOATMODIFIER
		{
			name = plumeSpeed
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 4 0 0
				key = 1 5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeAlpha
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1.25 0 0
				key = 0.25 1.5 0 0
				key = 0.5 2.5 0 0
				key = 1 2.5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeFresnel
			controllerName = warpEffectController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Fresnel
			floatCurve
			{
				key = 0 5 0 0
				key = 0.1 1.3 0 0
				key = 0.25 1.3 0 0
				key = 0.5 1.3 0 0
				key = 1 1.3 0 0
			}
		}
	}
}
// Waterfall End

	RESOURCE
	{
		name = FusionPellets
		amount = 96
		maxAmount = 96
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 100
	}

	RESOURCE
	{
		name = GravityWaves
		amount = 0
		maxAmount = 2000
	}

	RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
	{
		name = StaticCharge
		amount = 0
		maxAmount = 1000
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/FusionReactorRunning
				volume = 0.0 0.0
				volume = 0.05 0.5
				volume = 1.0 0.5
				pitch = 0.0 0.0
				pitch = 0.05 0.5
				pitch = 1.0 0.6
				loop = true
			}
		}
	}
}
