PART
{
	name = wbiS3WarpSustainer
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/s3WarpSustainer
	}

	rescaleFactor = 1

	node_stack_top = 0.0, 1.25, 0.0, 0.0, 1.0, 0.0, 3
	node_stack_bottom = 0.0, -1.25, 0.0, 0.0, -1.0, 0.0, 3

	TechRequired:NEEDS[WildBlueIndustries/FlyingSaucers] = wbiAdvAlienEngineering
	TechRequired:NEEDS[!WildBlueIndustries/FlyingSaucers&CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!WildBlueIndustries/FlyingSaucers&!CommunityTechTree] = wbiWarpTech

	category = Engine
	subcategory = 0
	entryCost = 50000
	cost = 87500

	title = S-3 Warp Sustainer
	manufacturer = <CLASSIFIED>
	description = The S-3 Warp Sustainer produces additional Warp Capacity that enables more massive vessels to travel faster than light and/or smaller vessels to go even faster.
	attachRules = 1,0,1,1,0
	mass = 6
	dragModelType = none
	maximum_drag = 0.02
	minimum_drag = 0.02
	angularDrag = 0.2
	stackSymmetry = 1
	crashTolerance = 20
	thermalMassModifier = 8.0
	emissiveConstant = 0.95
	maxTemp = 2000
	explosionPotential = 0.1
	fuelCrossFeed = True
	breakingForce = 500000
	breakingTorque = 500000
	bulkheadProfiles = size3

	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}

	MODULE
	{
		name = WBIAnimatedTexture
//		debugMode = true

		// ID of the module so we can distinguish between several animated textures in one part.
		// This one is controlled by the warp coil.
		moduleID = WarpCoil

		textureTransformName = warpCoilPlasma
		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpPlasma
		minFramesPerSecond = 15
		maxFramesPerSecond = 50
		fadesAtMinThrottle = true
		emissiveFadeTime = 0.5
	}

	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
//		debugMode = true

		// This also replaces the name shown in the editor.
		ConverterName = Auxiliary Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp engine.

		// Generators tagged as WarpCoil will receive throttle updates from warp engines.
		// If the generator controls effects and/or animated textures, then they'll be affected by the throttle updates.
		moduleID = WarpCoil

		StartActionName = Activate Auxiliary Power
		StopActionName = Deactivate Auxiliary Power
		ToggleActionName = Toggle Auxiliary Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
//		textureModuleID =

		// Generators can control effects too
//		startEffect = effectStart
//		stopEffect = effectStop
//		runningEffect = effectRunning

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.004
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = FusionPellets
			Ratio = 0.0001
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 100
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 6
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.004
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
//		debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
//		runningEffect =

		// How much warp capacity can the coil produce?
		warpCapacity = 5

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 100
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}

	RESOURCE
	{
		name = FusionPellets
		amount = 50
		maxAmount = 50
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 30
	}

	RESOURCE
	{
		name = GravityWaves
		amount = 0
		maxAmount = 100
	}

	RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
	{
		name = StaticCharge
		amount = 0
		maxAmount = 30
	}
}
